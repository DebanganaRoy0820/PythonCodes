#Given the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed.
#A subtree of a node node is node plus every node that is a descendant of node. 
#Example 1:
#Input: root = [1,null,0,0,1]
#Output: [1,null,0,null,1]
#Explanation: 
#Only the red nodes satisfy the property "every subtree not containing a 1".
#The diagram on the right represents the answer.
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Solution:
    def pruneTree(self, root: TreeNode) -> TreeNode:
        if root is None:
            return None
        root.left=Solution.pruneTree(self,root.left)
        root.right=Solution.pruneTree(self,root.right)
        if root.val is 0 and root.right is None and root.left is None:
            return None
        return root
        
